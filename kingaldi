#include "esp_camera.h"
#include <WiFi.h>
#include "esp_http_server.h"

#define CAMERA_MODEL_AI_THINKER // Has PSRAM
#define PWDN_GPIO_NUM     32
#define RESET_GPIO_NUM    -1
#define XCLK_GPIO_NUM      0
#define SIOD_GPIO_NUM     26
#define SIOC_GPIO_NUM     27

#define Y9_GPIO_NUM       35
#define Y8_GPIO_NUM       34
#define Y7_GPIO_NUM       39
#define Y6_GPIO_NUM       36
#define Y5_GPIO_NUM       21
#define Y4_GPIO_NUM       19
#define Y3_GPIO_NUM       18
#define Y2_GPIO_NUM        5
#define VSYNC_GPIO_NUM    25
#define HREF_GPIO_NUM     23
#define PCLK_GPIO_NUM     22

// ===========================
// Enter your WiFi credentials
// ===========================
const char *ssid = "ESP-cam";
const char *password = "123456789";

// Server handler for streaming MJPEG
static esp_err_t stream_handler(httpd_req_t *req) {
    camera_fb_t * fb = NULL;
    esp_err_t res = ESP_OK;
    size_t _jpg_buf_len;
    uint8_t * _jpg_buf;
    char * part_buf[64];
    
    res = httpd_resp_set_type(req, "multipart/x-mixed-replace; boundary=frame");

    if(res != ESP_OK){
        return res;
    }

    while(true){
        fb = esp_camera_fb_get();
        if (!fb) {
            Serial.println("Camera capture failed");
            res = ESP_FAIL;
        } else {
            _jpg_buf_len = fb->len;
            _jpg_buf = fb->buf;
            res = httpd_resp_send_chunk(req, "--frame\r\n", strlen("--frame\r\n"));
            if (res == ESP_OK){
                res = httpd_resp_send_chunk(req, "Content-Type: image/jpeg\r\n\r\n", strlen("Content-Type: image/jpeg\r\n\r\n"));
            }
            if (res == ESP_OK){
                res = httpd_resp_send_chunk(req, (const char *)_jpg_buf, _jpg_buf_len);
            }
            if (res == ESP_OK){
                res = httpd_resp_send_chunk(req, "\r\n", strlen("\r\n"));
            }
            esp_camera_fb_return(fb);
        }
        if(res != ESP_OK){
            break;
        }
    }
    return res;
}

void startCameraServer(){
    httpd_config_t config = HTTPD_DEFAULT_CONFIG();
    config.server_port = 80;

    httpd_handle_t server = NULL;
    if (httpd_start(&server, &config) == ESP_OK) {
        httpd_uri_t stream_uri = {
            .uri       = "/stream",
            .method    = HTTP_GET,
            .handler   = stream_handler,
            .user_ctx  = NULL
        };
        httpd_register_uri_handler(server, &stream_uri);
    }
}

void setup() {
  Serial.begin(115200);
  Serial.setDebugOutput(true);
  Serial.println();

  // Camera initialization
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sccb_sda = SIOD_GPIO_NUM;
  config.pin_sccb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG; // For streaming

  // Ubah resolusi dan kualitas JPEG
  config.frame_size = FRAMESIZE_SVGA;   // SVGA (800x600)
  config.jpeg_quality = 10;             // Kualitas JPEG 0-63 (lebih kecil lebih baik kualitasnya)
  config.fb_count = 2;                  // Buffer Frame

  // Jika ESP32 memiliki PSRAM, kita bisa menggunakan resolusi lebih tinggi
  if(psramFound()){
    //config.frame_size = FRAMESIZE_UXGA;  // UXGA (1600x1200)
    config.jpeg_quality = 25 ;            // Lebih tinggi kualitasnya
    config.fb_location = CAMERA_FB_IN_PSRAM;
    config.grab_mode = CAMERA_GRAB_LATEST;
  }

  // Inisialisasi kamera
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  }

  // ==== Tuning Sensor untuk Kecerahan ====
  sensor_t *s = esp_camera_sensor_get();
  
  // Flip Vertikal dan Horizontal untuk rotasi 180 derajat
  s->set_vflip(s, 1);  // Memutar gambar vertikal
  s->set_hmirror(s, 1);  // Memutar gambar horizontal
  
  s->set_brightness(s, 2);     // Brightness: -2 sampai 2 (lebih terang di 2)
  s->set_contrast(s, 0);       // Contrast: -2 sampai 2
  s->set_saturation(s, 2);    // Saturation: -2 sampai 2 (tingkatkan jika perlu)
  s->set_gainceiling(s, (gainceiling_t)0); // Set ke default gain

  // Nonaktifkan Auto Exposure untuk tuning manual jika perlu
  s->set_aec2(s, true);       // Nonaktifkan AEC (Auto Exposure Control)
//  s->set_aec_value(s, 1200);   // Exposure manual (nilai yang lebih tinggi lebih terang)

  // Set up WiFi Access Point
  WiFi.softAP(ssid, password);
  IPAddress IP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(IP);

  // Start streaming
  startCameraServer();

  Serial.print("Camera Ready! Use 'http://");
  Serial.print(IP);
  Serial.println("/stream' to connect");
}

void loop() {
  delay(10000);
}
